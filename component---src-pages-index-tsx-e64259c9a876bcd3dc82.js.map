{"version":3,"sources":["webpack://pipecastells.me/./src/components/link.tsx","webpack://pipecastells.me/./src/components/project.tsx","webpack://pipecastells.me/./src/pages/index.tsx"],"names":["children","url","title","console","error","toString","toUpperCase","href","target","rel","className","html","thumbnail","using","repo","img","getImage","childImageSharp","undefined","G","alt","image","dangerouslySetInnerHTML","__html","map","s","key","projects","useStaticQuery","allMarkdownRemark","edges","node","frontmatter","JSON","stringify"],"mappings":"yNAuBA,EAda,SAAC,GAA6B,MAA3BA,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,IACpBC,EAAQF,EACZ,OAAIE,GAA2B,iBAAVA,GACnBC,QAAQC,MAAM,0EAA6EF,EAAS,KAC7F,mCAETA,EAAQA,EAAK,UAAGA,SAAH,aAAG,EAAOG,WAAWC,cAAgB,GAEhD,qBAAGC,KAAMN,EAAKO,OAAO,SAASC,IAAI,YAChC,0BAAQC,UAAU,QAAQR,MCoChC,EAzCoB,SAAC,GAOG,IANtBS,EAMsB,EANtBA,KACAT,EAKsB,EALtBA,MACAU,EAIsB,EAJtBA,UACAC,EAGsB,EAHtBA,MACAZ,EAEsB,EAFtBA,IACAa,EACsB,EADtBA,KAEIC,EAAMH,GAAYI,OAASJ,EAAUK,sBAAmBC,EAE5D,OACE,uBAAKR,UAAU,WACb,uBAAKA,UAAU,aAAaK,GAAO,gBAAC,EAAAI,EAAD,CAAaC,IAAKlB,EAAQ,KAAOS,EAAMU,MAAON,KACjF,qBAAGL,UAAU,SAASR,GACtB,uBAAKQ,UAAU,gBACZC,GACC,uBACED,UAAU,cACVY,wBAAyB,CAAEC,OAAQZ,KAIvC,sBAAID,UAAU,SACXG,EAAMW,KAAI,SAAAC,GACT,OAAO,sBAAIC,IAAKD,GAAIA,QAK1B,uBAAKf,UAAU,SACZT,GACC,gCAAE,gBAAC,EAAD,CAAMA,IAAKA,GAAX,YAEHa,GACC,gCAAE,gBAAC,EAAD,CAAMb,IAAKa,GAAX,YCmBZ,EAxDkB,WAEhB,IA6BIa,GA7BiBC,oBAAe,cA2BjCC,kBAAkBC,MAEON,KAAI,YAAmB,IAAhBO,EAAgB,EAAhBA,KACjC,OAAKA,EAAKC,YAIR,gBAAC,EAAD,CACEN,IAAKK,EAAKC,YAAY/B,IACtBC,MAAO6B,EAAKC,YAAY9B,MACxBU,UAAWmB,EAAKC,YAAYpB,UAC5BC,MAAOkB,EAAKC,YAAYnB,MACxBZ,IAAK8B,EAAKC,YAAY/B,IACtBa,KAAMiB,EAAKC,YAAYlB,KACvBH,KAAMoB,EAAKpB,OAVN,yBAAIsB,KAAKC,UAAUH,OAe9B,OAAO,gBAAC,IAAD,KACL,gBAAC,IAAD,CAAK7B,MAAM,oBACVyB","file":"component---src-pages-index-tsx-e64259c9a876bcd3dc82.js","sourcesContent":["import React, { ReactNode } from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\n\r\ninterface Props {\r\n  url: string;\r\n  children: ReactNode\r\n}\r\n\r\nconst Link = ({ children, url }: Props) => {\r\n  let title = children;\r\n  if (title && typeof (title) != \"string\") {\r\n    console.error(\"A 'Link' can only be provided a 'string' as children. Provided: \" + typeof (title) + \"'\");\r\n    return <></>;\r\n  }\r\n  title = title ? title?.toString().toUpperCase() : \"\";\r\n  return (\r\n    <a href={url} target=\"_blank\" rel=\"noopener\" >\r\n      <button className=\"link\">{title}</button>\r\n    </a>\r\n  )\r\n}\r\n\r\nexport default Link\r\n","import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\r\nimport React from \"react\"\r\nimport Link from \"./link\"\r\nimport \"../assets/style/project.css\"\r\ninterface ProjectInterface {\r\n  title: string\r\n  thumbnail: any\r\n  using: Array<string>\r\n  url?: string\r\n  repo?: string\r\n  html: string\r\n}\r\n\r\nconst ProjectCard = ({\r\n  html,\r\n  title,\r\n  thumbnail,\r\n  using,\r\n  url,\r\n  repo,\r\n}: ProjectInterface) => {\r\n  let img = thumbnail ? getImage(thumbnail.childImageSharp) : undefined\r\n\r\n  return (\r\n    <div className=\"project\">\r\n      <div className=\"thumbnail\">{img && <GatsbyImage alt={title + \"\\n\" + html} image={img} />}</div>\r\n      <p className=\"title\">{title}</p>\r\n      <div className=\"project_info\">\r\n        {html && (\r\n          <div\r\n            className=\"description\"\r\n            dangerouslySetInnerHTML={{ __html: html }}\r\n          />\r\n        )}\r\n\r\n        <ul className=\"using\">\r\n          {using.map(s => {\r\n            return <li key={s}>{s}</li>\r\n          })}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"links\">\r\n        {url && (\r\n          <><Link url={url}>WEBSITE</Link></>\r\n        )}\r\n        {repo && (\r\n          <><Link url={repo}>CODE</Link></>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProjectCard\r\n","import * as React from \"react\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport Header from \"../components/header\"\r\nimport Link from \"../components/link\"\r\nimport Project from \"../components/project\"\r\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\r\n\r\nconst IndexPage = () => {\r\n\r\n  const projectsData = useStaticQuery(graphql`\r\n    query allProjects {\r\n      allMarkdownRemark {\r\n        edges {\r\n          node {\r\n            html\r\n            id\r\n            frontmatter {\r\n              url\r\n              title\r\n              thumbnail {\r\n                childImageSharp {\r\n                  gatsbyImageData(\r\n                    quality: 75\r\n                    width: 800\r\n                    placeholder: TRACED_SVG\r\n                    formats: [AUTO, WEBP, AVIF]\r\n                  )\r\n                }\r\n              }\r\n              using\r\n              repo\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `).allMarkdownRemark.edges\r\n\r\n  let projects = projectsData.map(({ node }: any) => {\r\n    if (!node.frontmatter) {\r\n      return <p>{JSON.stringify(node)}</p>\r\n    }\r\n    return (\r\n      <Project\r\n        key={node.frontmatter.url}\r\n        title={node.frontmatter.title}\r\n        thumbnail={node.frontmatter.thumbnail}\r\n        using={node.frontmatter.using}\r\n        url={node.frontmatter.url}\r\n        repo={node.frontmatter.repo}\r\n        html={node.html}\r\n      />\r\n    )\r\n  });\r\n\r\n  return <Layout>\r\n    <SEO title=\"Felipe Castells\" />\r\n    {projects}\r\n\r\n  </Layout>\r\n}\r\n\r\n\r\nexport default IndexPage\r\n"],"sourceRoot":""}